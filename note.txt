模块:
angular.module()的参数列表
name--模块的名称,字符串变量
requirest--字符串数组

angular.module('myApp',[])---定义模块,相当于AngularJS模块的setter方法,是用来定义模块的
angular.module('myApp')---这个方法用于获取应用,相当于AngularJS模块的getter的方法,用来获取对模块的引用.

五种方法与服务相关:
factory() --创建服务
service() --创建服务
provider() --创建服务，更好的可扩展性与config一起使用
constant() --  创建服务实例，config可访问
value()--创建服务实例，config不可访问
decorator--装饰器，中间件和拦截器的作用


x2js库
bower install x2js

xml table js
angular 中的resolve理解

Service vs Factory
function factory(name,factoryFn){
return provider(name,{$get:factoryFn});
}
function service(name,constructor){
return factory(name,['$injector',function($injector){
 return $injector.instantiate(constructor);
}
});
}
$injector.instantiate:

var app=angular.module('app',[])
app.service('helloWorldService',function(){
this.hello = function(){return "hello";
};
});

app.factory('helloWorldFactory',function(){
   return {
   hello:function(){
   return "Hello World";}
   }
}
});

依赖注入方式：
在内部创建依赖
通过全局变量进行引用
在需要的地方通过参数进行传递

所有的providers都是单例
添加路由
angular.module('myApp',[]).
config(['$routeProvider',function($routeProvider){
$routeProvider.when('/',
{
controller:'HomeController',
template:'<h2>We are home</h2>'
})
.otherwise({redirectTo:'/'});
}]);


angular.module('myApp')
.factory('myService',function(){
     return {
     'username':'auser'
     };
});

依赖注入
var app = angular.module('app',[]);
app.controller('MainCtrl',function($scope,$timeout){
$timeout(function(){
console.log($scope);
},1000);
});
app.controller("MainCtrl1",function(e,t){t(function(){console.log(e)},1e3)})

指令(directive):
angular.module('myApp',[])
.directive('myDirective',function(){
return {
   restrict:'E',
   template:'<a href="http://google.com">
   Click me to go to Google</a>'
   }
   });
<my-directive></my-directive>
<div my-directive></div>
<div class="my-directive"></div>

var app = angular.module('myApp', []); //‘myApp’是你在HTML中应用程序的名字，
app.service('serviceName',function($scope){
//TDD,写你想要的程序代码
//定义变量
this.name = ‘张三’; //这个就是在service定义的变量，用this，相当于var。这个是全局变量
//定义函数
this.functionName = function(){
/*
*这里怎么做
*/
};
});

//任何地方都可以调用service中的函数和变量,只要将service名称引用就行，像这样
app.controller('controllerName',function($scope,serviceName){
$scope.name = serviceName.name;
console.log($scope.name); //输出值是‘张三’;
});

<div ng-app>
<input ng-model="name" type="text" placeholder="请输入姓名">
<p>我的姓名:{{name}}</p>
</div>

<div ng-app>
<input ng-model="age" type="number" placeholder="请输入年龄">
<p>我的年龄:{{age}}</p>
</div>

著作权归作者所有。
商业转载请联系作者获得授权，非商业转载请注明出处。
作者：夏hf
链接：https://www.zhihu.com/question/34972098/answer/61120284
来源：知乎

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>sample</title>
	<script src="angular.js"></script>
</head>
<body>
	<div id="A1" ng-app="app1">
		<input ng-model="name" type="text" placeholder="请输入姓名">
		<p>我的姓名： {{name}}</p>
	</div>

	<div id="A2" ng-app="app2">
		<input ng-model="age" type="number" placeholder="请输入年龄">
		<p>我的年龄: {{age}}</p>
	</div>

	<script type="text/javascript">
		var app1 = angular.module("app1",[]);
		var app2 = angular.module("app2",[]);

		angular.bootstrap(document.getElementById("A2"),['app2']);
	</script>
</body>
</html>
定义一个指令（directive）有哪些不同的方法？

chapter9:
ng-show/ng-hide
ng-change
ng-form
ng-valid
ng-invalid
ng-pristion
ng-dirty
ng-submit
ng-click
ng-select
ng-class
ng-attr-(suffix)

17章 promise细节介绍

非侵入性的Javascript:
1.不是每个人的浏览器都支持Javascript,让每个人看到你所有的内容,并使用你的应用,而不需要在浏览器中执行代码
2.一些使用浏览器的人从事着不同地工作.那些使用屏幕阅读器和移动电话的视障人士就不能使用带Javascript的站点
3.Javascript在不同的平台上运行有差异.IE通常是罪魁祸首.你需要根据浏览器放入到不同的时间处理代码中.
4.这些事件处理引用函数在全局命名空间下.当与其他库中的相同函数名集成时,头痛
5.这些事件处理程序把结构何行为组织在一起.这导致你的代码更难以维护,扩展和理解
部分参考http://blog.jobbole.com/78946/
https://segmentfault.com/a/1190000004385117 瀑布流设计
http://www.angularjs.cn/A0a6  watch
http://www.haomou.net/2014/08/11/2014_ionic_api/
http://blog.csdn.net/i348018533/article/details/47258449#0-tsina-1-71108-397232819ff9a47a7b7e80a40613cfe1